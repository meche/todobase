{"version":3,"sources":["core/resets.styl","components/layout.styl","../../node_modules/jeet/stylus/jeet/_grid.styl","components/todo.styl","../../node_modules/rupture/rupture/index.styl","components/forms.styl"],"names":[],"mappings":"AAAA,EACE,SACA,SAAQ,CCFV,KACI,mBAAqB,4DAErB,kFAAA,AAAyD,0DAAzD,AAAyD,uDAAzD,AAAyD,qDAAzD,AAAyD,oDAAA,CAE7D,OACI,WACA,kBAAS,CACT,iBCyQD,OAjGD,WACA,gBACA,WACA,cACA,kBACA,iBACA,eACA,gBD7KM,WACA,cACA,gCACA,kBACA,aAAM,CCqQZ,6CACE,WACA,aAAS,CAEX,sBACE,UAAO,CCxRX,QDiRG,OAjGD,WACA,gBACA,WACA,cACA,kBACA,iBACA,eACA,gBCrLE,cAAM,CDiRR,2BACE,WACA,aAAS,CAEX,aACE,UAAO,CEzIA,yCAAA,OD3IH,WACA,eAAS,CAAA,CACb,UACI,gCACA,cACA,kBAAW,CCsIR,yCAAA,UDpIC,aAAU,CAAA,CAClB,SACI,gCACA,eACA,oBACA,yBACA,iBAAW,CAEf,gBACI,kBACA,SACA,UACA,YACA,YACA,mBACA,gCACA,kBACA,cACA,0BAAA,AAAc,uBAAd,AAAc,kBAAA,CCkHX,yCAAA,gBDhHC,OACA,UACA,iBAAW,CAAA,CACvB,YD+OG,OAjGD,WACA,gBACA,WACA,cACA,kBACA,iBACA,eACA,gBCnJE,oBAAA,AACA,qBADA,AACA,iBADA,AACA,oBADA,AACA,aAAA,gCAAA,AACA,4BADA,AACA,wBAAA,yBAAA,AAAY,2BAAZ,AAAY,sBAAZ,AAAY,sBAAZ,AAAY,mBAAA,CD6Od,mCACE,WACA,aAAS,CAEX,iBACE,UAAO,CEzIA,yCAAA,WDvGH,WACA,eAAS,CAAA,CAEjB,OACI,WACA,YACA,oBAAA,AACA,qBADA,AACA,iBADA,AACA,oBADA,AACA,aAAA,yBACA,6BAAA,AACA,yBADA,AACA,qBAAA,yBAAA,AACA,sCADA,AACA,sBADA,AACA,sBADA,AACA,8BAAA,yBAAA,AACA,2BADA,AACA,sBADA,AACA,sBADA,AACA,mBAAA,gCACA,gBACA,cACA,gBAAS,CACT,uBACI,gCAAW,CCuFR,yCAAA,ODrFH,YACA,8BAAA,AACA,0BADA,AACA,sBAAA,gBAAS,CAAA,CAEjB,YACI,WACA,oBAAA,AACA,qBADA,AACA,iBADA,AACA,oBADA,AACA,aAAA,6BAAA,AACA,yBADA,AACA,qBAAA,uBAAA,AACA,mCADA,AACA,oBADA,AACA,oBADA,AACA,2BAAA,yBAAA,AAAY,2BAAZ,AAAY,sBAAZ,AAAY,sBAAZ,AAAY,mBAAA,CACZ,mBACI,WACA,YACA,QAAO,CACX,kBACI,WACA,YACA,cACA,yBACA,gBACA,iBAAa,CCiEV,yCAAA,kBD/DC,YACA,gBAAS,CAAA,CACjB,6DACI,6BACA,UAAQ,CAEf,mBACG,yBAAe,CCwDR,yCAAA,mBDtDH,eAAW,CAAA,CACf,yBACI,aACA,mBAAW,CCmDR,yCAAA,yBDjDC,YAAQ,CAAA,CAChB,2BACI,aACA,mBAAW,CC8CR,yCAAA,2BD5CC,YAAQ,CAAA,CAChB,qBACI,cACA,oBAAgB,CEtGxB,OHiRG,OAjGD,WACA,gBACA,WACA,cACA,kBACA,iBACA,eACA,gBGrLE,YACA,oBAAA,AACA,qBADA,AACA,iBADA,AACA,oBADA,AACA,aAAA,6BAAA,AACA,yBADA,AACA,qBAAA,eAAQ,CH8QV,yBACE,WACA,aAAS,CAEX,YACE,UAAO,CEzIA,yCAAA,MCxIH,YAAQ,CAAA,CACZ,aACI,UACA,YACA,gCACA,yBACA,kBACA,QAAO,CACX,cACI,UACA,YACA,SACA,UACA,SACA,mBACA,aAAM,CAAA,qCAAA","file":"style.css","sourceRoot":"/source/","sourcesContent":["*\r\n  margin 0\r\n  padding 0","body\r\n    background: #606c88; /* fallback for old browsers */\r\n    background: -webkit-linear-gradient(to left, #606c88 , #3f4c6b); /* Chrome 10-25, Safari 5.1-6 */\r\n    background: linear-gradient(to left, #606c88 , #3f4c6b); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\r\n\r\nfooter\r\n    width 100%\r\n    position relative\r\n    .licence\r\n        center(600px)\r\n        width 100%\r\n        margin 0 auto\r\n        font-family $roboto\r\n        text-align center\r\n        color $text-light\r\n","/**\n * Style an element as a column with a gutter.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [offset=0] - A offset specified as a fraction (see ratios).\n * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.\n * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn(ratios = 1, offset = 0, cycle = 0, uncycle = 0, gutter = jeet.gutter)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n  column-widths = jeet-get-column(ratios, gutter)\n  margin-last = 0\n  margin-l = margin-last\n  margin-r = column-widths[1]\n\n  unless offset == 0\n    if offset < 0\n      offset *= -1\n      offset = jeet-get-column(offset, column-widths[1])[0]\n      margin-r = margin-last = offset + column-widths[1] * 2\n    else\n      offset = jeet-get-column(offset, column-widths[1])[0]\n      margin-l = offset + column-widths[1]\n\n  cf()\n  float: side\n  clear: none\n  text-align: inherit\n  width: (column-widths[0])%\n  margin-{side}: (margin-l)%\n  margin-{opposite-side}: (margin-r)%\n\n  if uncycle != 0\n    &:nth-child({uncycle}n)\n      margin-{opposite-side}: (margin-r)%\n      float: side\n    &:nth-child({uncycle}n+1)\n      clear: none\n\n  if cycle != 0\n    &:nth-child({cycle}n)\n      margin-{opposite-side}: (margin-last)%\n      float: opposite-side\n    &:nth-child({cycle}n+1)\n      clear: both\n   else\n    &:last-child\n      margin-{opposite-side}: (margin-last)%\n\n/**\n * An alias for the column mixin.\n */\ncol = column\n\n/**\n * Get the width of a column and nothing else.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn-width(ratios = 1, gutter = jeet.gutter)\n  return jeet-get-column(ratios, gutter)[0] + '%'\n\n/**\n * An alias for the column-width function.\n */\ncw = column-width\n\n/**\n * Get the gutter size of a column and nothing else.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\ncolumn-gutter(ratios = 1, gutter = jeet.gutter)\n  return jeet-get-column(ratios, gutter)[1] + '%'\n\n/**\n * An alias for the column-gutter function.\n */\ncg = column-gutter\n\n/**\n * Style an element as a column without any gutters for a seamless row.\n * @param {number} [ratios=1] - A width relative to its container as a fraction.\n * @param {number} [offset=0] - A offset specified as a fraction (see ratios).\n * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.\n * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.\n */\nspan(ratio = 1, offset = 0, cycle = 0, uncycle = 0)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n  span-width = jeet-get-span(ratio)\n  margin-r = 0\n  margin-l = margin-r\n\n  unless offset == 0\n    if offset < 0\n      offset *= -1\n      margin-r = jeet-get-span(offset)\n    else\n      margin-l = jeet-get-span(offset)\n\n  cf()\n  float: side\n  clear: none\n  text-align: inherit\n  width: (span-width)%\n  margin-{side}: (margin-l)%\n  margin-{opposite-side}: (margin-r)%\n\n  if cycle != 0\n    &:nth-child({cycle}n)\n      float: opposite-side\n    &:nth-child({cycle}n + 1)\n      clear: both\n\n  if uncycle != 0\n    &:nth-child({uncycle}n)\n      float: side\n    &:nth-child({uncycle}n + 1)\n      clear: none\n\n/**\n * Reorder columns without altering the HTML.\n * @param {number} [ratios=0] - Specify how far along you want the element to move.\n * @param {string} [col-or-span=column] - Specify whether the element has a gutter or not.\n * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.\n */\nshift(ratios = 0, col-or-span = column, gutter = jeet.gutter)\n  translate = ''\n  side = jeet-get-layout-direction()\n\n  if side == right\n    ratios = jeet-replace-nth(ratios, 0, ratios[0] * -1)\n\n  if col-or-span == column or col-or-span == col or col-or-span == c\n    column-widths = jeet-get-column(ratios, gutter)\n    translate = column-widths[0] + column-widths[1]\n  else\n    translate = jeet-get-span(ratios)\n\n  position: relative\n  left: (translate)%\n\n/**\n * Reset an element that has had shift() applied to it.\n */\nunshift()\n  position: static\n  left: 0\n\n/**\n * View the grid and its layers for easy debugging.\n * @param {string} [color=black] - The background tint applied.\n * @param {boolean} [important=false] - Whether to apply the style as !important.\n */\nedit(color = black, important = false)\n  if important\n    *\n      background: rgba(color, 5%) !important\n  else\n    *\n      background: rgba(color, 5%)\n\n/**\n *  Alias for edit().\n */\ndebug = edit\n\n/**\n * Horizontally center an element.\n * @param {number} [max-width=jeet.max-width] - The max width the element can be.\n * @param {number} [pad=0] - Specify the element's left and right padding.\n */\ncenter(max-width = jeet.max-width, pad = 0)\n  cf()\n  width: auto\n  max-width: max-width\n  float: none\n  display: unquote('block')\n  margin-right: auto\n  margin-left: auto\n  padding-left: pad\n  padding-right: pad\n\n/**\n * Uncenter an element.\n */\nuncenter()\n  max-width: none\n  margin-right: 0\n  margin-left: 0\n  padding-left: 0\n  padding-right: 0\n\n/**\n * Stack an element so that nothing is either side of it.\n * @param {number} [pad=0] - Specify the element's left and right padding.\n * @param {bollean/string} [align=false] - Specify the text align for the element.\n */\nstack(pad = 0, align = false)\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n\n  display: unquote('block')\n  clear: both\n  float: none\n  width: 100%\n  margin-left: auto\n  margin-right: auto\n\n  &:first-child\n    margin-{side}: auto\n\n  &:last-child\n    margin-{opposite-side}: auto\n\n  if pad != 0\n    padding-left: pad\n    padding-right: pad\n\n  if (align is not false)\n    if (align == center) or (align == c)\n      text-align: center\n    if (align == left) or (align == l)\n      text-align: left\n    if (align == right) or (align == r)\n      text-align: right\n\n/**\n * Unstack an element.\n */\nunstack()\n  side = jeet-get-layout-direction()\n  opposite-side = opposite-position(side)\n\n  text-align: side\n  display: inline\n  clear: none\n  width: auto\n  margin-left: 0\n  margin-right: 0\n\n  &:first-child\n    margin-{side}: 0\n\n  &:last-child\n    margin-{opposite-side}: 0\n\n/**\n * Center an element on either or both axes.\n * @requires A parent container with relative positioning.\n * @param {string} [direction=both] - Specify which axes to center the element on.\n */\nalign(direction = both)\n  position: absolute\n  transform-style: preserve-3d\n\n  if (direction == horizontal) or (direction == h)\n    left: 50%\n    transform: translateX(-50%)\n  else if (direction == vertical) or (direction == v)\n    top: 50%\n    transform: translateY(-50%)\n  else\n    top: 50%\n    left: 50%\n    transform: translate(-50%, -50%)\n\n/**\n * Apply a clearfix to an element.\n */\ncf()\n  *zoom: 1\n\n  &:before, &:after\n    content: ''\n    display: table\n\n  &:after\n    clear: both\n","header\r\n    center(600px)\r\n    color $text-light\r\n    +below(600px)\r\n        width 100%\r\n        overflow hidden\r\n    h1\r\n        font-family $roboto\r\n        font-size 5em\r\n        text-align center\r\n        +below(600px)\r\n            font-size 3em\r\n    p\r\n        font-family $roboto\r\n        font-size .7em\r\n        letter-spacing .2em\r\n        text-transform uppercase\r\n        text-align center\r\n.alert-delete\r\n    p\r\n        position absolute\r\n        top 15px\r\n        left 15px\r\n        width 320px\r\n        padding 7px\r\n        background $color-alert\r\n        font-family $roboto\r\n        line-height 1.4em\r\n        color $text-light\r\n        border-radius 7px\r\n        +below(600px)\r\n            left 0\r\n            width 80%\r\n            text-align center\r\n.todo-list\r\n    center(600px)\r\n    display flex\r\n    flex-flow column nowrap\r\n    align-items center\r\n    +below(600px)\r\n        width 100%\r\n        overflow hidden\r\n\r\n.todos\r\n    width 100%\r\n    height 45px\r\n    display flex\r\n    padding 15px 0 15px 15px\r\n    flex-flow row nowrap\r\n    justify-content space-between\r\n    align-items center\r\n    font-family $roboto\r\n    font-weight 300\r\n    color $text-light\r\n    overflow hidden\r\n    &:nth-child(2n+1)\r\n        background $color-checked\r\n    +below(600px)\r\n        height auto\r\n        flex-flow column wrap\r\n        overflow visible\r\n\r\n.todos-list\r\n    width 100%\r\n    display flex\r\n    flex-flow row nowrap\r\n    justify-content flex-start\r\n    align-items center\r\n    &__check\r\n        width 44px\r\n        height 44px\r\n        border 0\r\n    &__text\r\n        width 100%\r\n        height 44px\r\n        font-size 2em\r\n        text-transform uppercase\r\n        overflow hidden\r\n        margin-left: 15px\r\n        +below(600px)\r\n            height auto\r\n            overflow visible\r\n    input[type=checkbox]:checked + .todos-list__text\r\n        text-decoration line-through\r\n        opacity 0.3\r\n\r\n .todos-controllers\r\n    text-transform uppercase\r\n    +below(600px)\r\n        margin-top 44px\r\n    &__edit\r\n        padding 25px\r\n        background $color-send\r\n        +below(600px)\r\n            padding 10px\r\n    &__delete\r\n        padding 25px\r\n        background $color-alert\r\n        +below(600px)\r\n            padding 10px\r\n    a\r\n        color $text-light\r\n        text-decoration none\r\n","base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n",".form\r\n    center(600px)\r\n    height 44px\r\n    display flex\r\n    flex-flow row nowrap\r\n    padding 50px 0\r\n    +below(600px)\r\n        padding 15px\r\n    &__input\r\n        width 80%\r\n        height 100%\r\n        font-family $roboto\r\n        text-transform uppercase\r\n        padding-left 15px\r\n        border 0\r\n    &__button\r\n        width 20%\r\n        height 100%\r\n        border 0\r\n        padding 0\r\n        margin 0\r\n        background $color-send\r\n        color $text-light\r\n"]}